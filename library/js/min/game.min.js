window.onload = function() {
  var gameWidth = 800, // game width in px
      gameHeight = 600; // game height in px
  var game = new Phaser.Game(gameWidth, gameHeight, Phaser.AUTO, 'phaser-stage');

  game.state.add('Boot', PhaserBp.Boot);
  game.state.add('Preload', PhaserBp.Preload);
  game.state.add('MainMenu', PhaserBp.MainMenu);
  game.state.add('Splash', PhaserBp.Splash);
  game.state.add('Game', PhaserBp.Game);

  game.state.start('Boot');
};




//Boot State
var PhaserBp = {};

PhaserBp.Boot = function(game) {
  console.log("Boot State Initiated");
};

PhaserBp.Boot.prototype = {
  preload: function () {

    //  Here we load the assets required for our preloader (in this case a background and a loading bar)
    // If you want background for preloader uncomment and add background image
    // this.load.image('preloaderBackground', 'assets/img/preloader_background.jpg');
    this.load.image('preloaderBar', 'library/assets/images/preload_bar_phaser.png');
  },
  create: function() {
    //  Unless you specifically know your game needs to support multi-touch I would recommend setting this to 1
    this.input.maxPointers = 1;
    //  Phaser will automatically pause if the browser tab the game is in loses focus. You can disable that here:
    this.stage.disableVisibilityChange = true;
        
    if (this.game.device.desktop) {
        //  If you have any desktop specific settings, they can go in here
        this.scale.pageAlignHorizontally = true;
    } else {
        //  Same goes for mobile settings.
        //  In this case we're saying "scale the game, no lower than 480x260 and no higher than 1024x768"
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.minWidth = 480;
        this.scale.minHeight = 260;
        this.scale.maxWidth = 1024;
        this.scale.maxHeight = 768;
        this.scale.forceLandscape = true;
        this.scale.pageAlignHorizontally = true;
        this.scale.setScreenSize(true);
    }
    //this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    //this.scale.minHeight = 800;
    //this.scale.minWidth = 600;
    //this.scale.pageAlignHorizontally = true;
    //this.scale.pageAlignVertically = true;
    //this.stage.forcePortrait = false;
    this.input.addPointer();
    this.stage.backgroundColor = '#DBDBDB';
        
    //  By this point the preloader assets have loaded to the cache, we've set the game settings
    //  So now let's start the real preloader going
    this.state.start('Preload');
  }
}
var lightAngle = Math.PI/4;
var numberOfRays = 20;
var rayLength = 100;

// Game State
PhaserBp.Game = function(game) {
  console.log("Game State Initiated");
};

PhaserBp.Game.prototype = {

  create: function() {
    this.stage.backgroundColor = '#000';
    floor = this.add.sprite(0,0,"floor");
  	wallsBitmap = this.make.bitmapData(800,600);
  	wallsBitmap.draw("walls");
  	wallsBitmap.update();
  	this.add.sprite(0,0,wallsBitmap);
  	player = this.add.sprite(80,80,"player");
  	player.anchor.setTo(0.5,0.5);
  	cursors = this.input.keyboard.createCursorKeys();
  	maskGraphics = this.game.add.graphics(0, 0);
  	floor.mask=maskGraphics;
    
    //this.add.sprite(400 - 32, 300 - 32, 'renderTest');
  },

  update: function() {
    var xSpeed = 0;
  	var ySpeed = 0;
  	if(cursors.up.isDown) {
  		ySpeed -=1;
  	}
  	if(cursors.down.isDown) {
  		ySpeed +=1;
  	}
  	if(cursors.left.isDown) {
  		xSpeed -=1;
  	}
  	if(cursors.right.isDown) {
  		xSpeed +=1;
  	}
  		
  	if(Math.abs(xSpeed)+Math.abs(ySpeed)<2 && Math.abs(xSpeed)+Math.abs(ySpeed)>0){
  		var color = wallsBitmap.getPixel32(player.x+xSpeed+player.width/2,player.y+ySpeed+player.height/2);
  		color+= wallsBitmap.getPixel32(player.x+xSpeed-player.width/2,player.y+ySpeed+player.height/2);
  		color+=wallsBitmap.getPixel32(player.x+xSpeed-player.width/2,player.y+ySpeed-player.height/2)
  		color+=wallsBitmap.getPixel32(player.x+xSpeed+player.width/2,player.y+ySpeed-player.height/2)
  		if(color==0){
  		  player.x+=xSpeed;
  	    player.y+=ySpeed;
  		}		
  	}
  	var mouseAngle = Math.atan2(player.y-this.input.y,player.x-this.input.x);
  	maskGraphics.clear();
  	maskGraphics.lineStyle(2, 0xffffff, 1);
  	maskGraphics.beginFill(0xffff00);
  	maskGraphics.moveTo(player.x,player.y);	
  	for(var i = 0; i<numberOfRays; i++){	
  	  var rayAngle = mouseAngle-(lightAngle/2)+(lightAngle/numberOfRays)*i
  		var lastX = player.x;
  		var lastY = player.y;
  		for(var j= 1; j<=rayLength;j+=1){
        var landingX = Math.round(player.x-(2*j)*Math.cos(rayAngle));
        var landingY = Math.round(player.y-(2*j)*Math.sin(rayAngle));
        if(wallsBitmap.getPixel32(landingX,landingY)==0){
  			  lastX = landingX;
  				lastY = landingY;	
  			}
  			else{
  			  maskGraphics.lineTo(lastX,lastY);
  				break;
  			}
  		}
  		maskGraphics.lineTo(lastX,lastY);
  	}
  	maskGraphics.lineTo(player.x,player.y); 
    maskGraphics.endFill();
  	floor.alpha = 0.5+Math.random()*0.5;
	}
};

// Preload State
PhaserBp.Preload = function(game) {
  console.log("Load State Initiated");
  
  this.background = null;
  this.preloadBar = null;

  this.ready = false;
};

PhaserBp.Preload.prototype = {

	preload: function () {
	  // These are the assets we loaded in Boot.js
    // A nice sparkly background and a loading progress bar

    // If you want background, uncomment 
    //this.background = this.add.sprite(0, 0, 'preloaderBackground');
        
    this.preloadBar = this.add.sprite(800 / 2 - 382 / 2, 
      600 / 2 - 331 / 2, 'preloaderBar'); // center preload sprite gamewidth / 2 - sprite.width / 2
        	
    // This sets the preloadBar sprite as a loader sprite.
    // What that does is automatically crop the sprite from 0 to full-width
    // as the files below are loaded in.
    this.load.setPreloadSprite(this.preloadBar);
        	
    // Here we load the rest of the assets our game needs.
    this.load.image('menuBg', 'library/assets/images/menu_background.png'); // MainMenu background image
    this.load.image('playButton', 'library/assets/images/play_button.png'); // Play button image for MainMenu
    this.load.audio('menuMusic', ['library/assets/audio/main_menu_undiscovered.mp3']); // Music for MainMenu
    this.load.image('btnMusicPause', 'library/assets/images/btn-musicpause.png'); // MainMenu music stop button
    this.load.image('btnMusicPlay', 'library/assets/images/btn-musicplay.png'); // MainMenu music play button

    //this.load.image('gameBg', 'library/assets/img/game_background.png'); // Game background image
    //this.load.atlasJSONHash('fly', 'library/assets/sprites/fly.png', 'assets/sprites/fly.json'); // Fly sprite json
    this.load.image('floor', 'library/assets/images/floor.png');
    this.load.image('player', 'library/assets/images/player.png');
    this.load.image('walls', 'library/assets/images/walls.png');
    this.load.image('cod', 'library/assets/images/cod.png');
        
    //this.load.image('splash', 'assets/img/splash.png'); // Splash image

    this.load.image('btnPause', 'library/assets/images/btn-pause.png'); // Game pause button
    this.load.image('btnPlay', 'library/assets/images/btn-play.png'); // Game unpause button

    // Fonts
        
    // + lots of other required assets here
       
    this.load.image('renderTest', 'library/assets/images/megaman.png');
	},

	create: function () {
		// Once the load has finished we disable the crop because we're going to sit in the update loop for a short while as the music decodes
    this.preloadBar.cropEnabled = false;
	},

	update: function () {
		// You don't actually need to do this, but I find it gives a much smoother game experience.
    // Basically it will wait for our audio file to be decoded before proceeding to the MainMenu.
    // You can jump right into the menu if you want and still play the music, but you'll have a few
    // seconds of delay while the mp3 decodes - so if you need your music to be in-sync with your menu
    // it's best to wait for it to decode here first, then carry on.

    // If you don't have any music in your game then put the game.state.start line into the create function and delete
    // the update function completely.

    if (this.cache.isSoundDecoded('menuMusic') && this.ready === false) {
      this.ready = true;
      this.state.start('MainMenu');
    }
    //this.state.start('Game');
	}
};

var content = [
    " ",
    "Team Phaser presents",
    "a phaser production",
    "Qonfused",
    "",
    " ",
    "in Burgas Game Jam",
    "    ",
    "We are afraid of darkness, ",
    "but we all came from the dark. ",
    "Dark is our shelter, in the dark ",
    "room we are searching for the ",
    "meaning. Do we need the light? ",
    "Really? ",
    "What shall we see in the dawn, ",
    "will the sunlight save us, or ",
    "it will blind us? ",
    "Come and reveal your fears ",
    "swimming in a fish bowl. ",
    "Do you really wanna see",
    "the wild world?",
];

var text;
var index = 0;
var line = '';

// Splash State
PhaserBp.Splash = function(game) {
  console.log("Game State Initiated");
};

PhaserBp.Splash.prototype = {

  create: function() {
    //this.add.sprite(0, 0, 'cod');
    this.stage.backgroundColor = '#000';
    
    text = this.add.text(32, 380, '', { font: "30pt Courier", 
      fill: "#19cb65", stroke: "#119f4e", strokeThickness: 2 });

    index++;
    if (index < content.length) {
      line = '';
      this.time.events.repeat(80, content[index].length + 1, updateLine, this);
    }
    
    
    function updateLine() {
      if (line.length < content[index].length) {
        line = content[index].substr(0, line.length + 1);
        // text.text = line;
        text.setText(line);
      } else {
        //  Wait 2 seconds then start a new line
        this.time.events.add(Phaser.Timer.SECOND * 2, nextLine = function() {
          index++;
  
          if (index < content.length) {
            line = '';
            this.time.events.repeat(80, content[index].length + 1, updateLine, this);
          }
        }, this);
      }
    }
    
    var key = this.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR); //see here: http://docs.phaser.io/Keyboard.js.html for the keycodes
    key.onDown.add(function(key)
    {
        this.state.start('Game');
    }, this);
  },

  update: function() {
    
	}
};


// MainMenu State
PhaserBp.MainMenu = function(game) {
	console.log("MainMenu State Initiated");
  	
  this.music = null;
  this.playButton = null;
};

// Pause flag
var paused = true;

PhaserBp.MainMenu.prototype = {
  create: function () {
	  // We've already preloaded our assets, so let's kick right into the Main Menu itself.
    // Here all we're doing is playing some music and adding a picture and button
    // Naturally I expect you to do something significantly better :)

    // Here we add music
    this.music = this.add.audio('menuMusic');
    //this.music.play();

    // Add menu background
    this.add.sprite(0, 0, 'menuBg');

    // Add play button for game start
    this.playButton = this.add.button(800 / 2 - 48, 260, 'playButton', this.startGame, this, 'buttonOver', 'buttonOut', 'buttonOver');

    // Add a pause button
    this.btnMusicPause = this.game.add.button(20, 20, 'btnMusicPause', this.pauseMusic, this);

    // Let's build a pause panel
    this.musicPanel = new MusicPanel(this.game);
    this.game.add.existing(this.musicPanel);

    // Enter play music mode
    this.music.play();
    this.playMusic();
  },

  update: function () {
    	
    // Do some nice funky main menu effect here
	},
	
	startGame: function (pointer) {

    // Ok, the Play Button has been clicked or touched, so let's stop the music (otherwise it'll carry on playing)
    this.music.stop();

    // And start the actual game
    //this.state.start('Game');
    this.state.start('Splash');
  },

  pauseMusic: function () {
    if (!paused) {
      // Enter pause
      paused = true;

      // Show pause panel
      this.musicPanel.show();

      // Pause music
      this.music.pause();
    }
  },

  playMusic: function () {
    if (paused) {
      // Leaving pause
      paused = false;
      // Hide pause panel
      this.musicPanel.hide();

      // Resume music
      this.music.resume();
    }
  }
};

// Create our pause panel extending Phaser.Group
var MusicPanel = function (game, parent) {
  // Super call to Phaser.Group
  Phaser.Group.call(this, game, parent);

  // Add play button
  this.btnMusicPlay = this.game.add.button(20, 20, 'btnMusicPlay', function () {
    this.game.state.getCurrentState().playMusic();
  }, this);

  this.add(this.btnMusicPlay);

  // Place it out of bounds
  this.x = 0;
  this.y = -100;
};

MusicPanel.prototype = Object.create(Phaser.Group.prototype);
MusicPanel.constructor = MusicPanel;

MusicPanel.prototype.show = function () {
	// Add tween
  this.game.add.tween(this).to({y: 0}, 500, Phaser.Easing.Bounce.Out, true);
};
MusicPanel.prototype.hide = function () {
	// If you want tween uncomment
  //this.game.add.tween(this).to({y: -350}, 1, Phaser.Easing.Linear.NONE, true);
  this.y = -350;
};